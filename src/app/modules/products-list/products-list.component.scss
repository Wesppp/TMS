@use "mixins" as mixins;
@use "colors" as colors;
@use "constants" as constants;

:host ::ng-deep p-paginator {
  .p-paginator-first, .p-paginator-last  {
    display: none;
  }

  .p-paginator {
    gap: 1rem;

    & .p-paginator-pages .p-paginator-page.p-highlight {
      color: #fff;
      background: colors.$primary;
      border-color: colors.$primary;
    }

    &-pages {
      @include mixins.flexMix($gap: 1rem);
    }

    .p-element {
      border-radius: .2rem;
      border: 2px solid colors.$second-primary;
      color: colors.$second-primary;
      font-weight: 600;

      .p-icon-wrapper {
        border: none;
      }
    }
  }
}

:host ::ng-deep app-page-title {
  .page-title {
    height: 300px;
  }
}

.products-list {
  &__main {
    @include mixins.flexMix($align: normal, $justify: normal, $gap: 1.8rem);

    padding-top: 1.8rem;
    padding-bottom: 1.8rem;

    .top-bar-filters {
      @include mixins.flexMix(column, normal, $gap: .8rem);

      app-custom-button {
        display: none;

        @media (max-width: constants.$medium-screen) {
          display: block;
        }
      }
    }

    ul {
      @include mixins.gridMix($columns: repeat(4, 1fr), $gap: 1.5rem);

      padding-top: 2rem;

      @media (max-width: constants.$wide-screen) {
        grid-template-columns: repeat(3, 1fr);
      }

      @media (max-width: constants.$wide-medium-screen) {
        grid-template-columns: repeat(2, 1fr);
      }

      @media (max-width: constants.$small-medium-screen) {
        grid-template-columns: repeat(1, 1fr);
      }
    }

    @media (max-width: constants.$medium-screen) {
      display: block;
    }
  }

  &--stretch {
    ul {
      @include mixins.gridMix($columns: 1fr, $gap: 1.5rem);
    }
  }
}

.max-width-container {
  @include mixins.maxWidthContainer();

  @media (max-width: constants.$medium-screen) {
    padding-left: .6rem;
    padding-right: .6rem;
  }
}
